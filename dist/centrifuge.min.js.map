{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap b2ddf26611a603e8e645","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_websocket","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_lastSeq","_lastGen","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_config","debug","websocket","sockjs","promise","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","params","headers","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","assign","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","xhrID","abort","reconnect","_stopPing","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_shouldResubscribe","_setSubscribing","_setUnsubscribed","_abortInflightXHRs","_clearSubRefreshTimeout","transport","OPEN","commands","_isTransportOpen","command","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","onheartbeat","_restartPing","msg","Date","_call","then","resolveCtx","_connectResponse","decodeCommandResult","CONNECT","result","next","rejectCtx","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_this4","method","RPC","isConnected","Promise","reject","SEND","_transportSend","resolve","PUBLISH","_this5","replies","decodeReplies","_dispatchReply","_this6","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this7","_refreshFailed","clientID","_newXHRID","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","err","_this8","_this9","expires","client","_getTTLMilliseconds","ttl","_this10","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this11","subRefreshTimeout","_subRefresh","_this12","isResubscribe","_this13","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","recover","seq","_getLastSeq","gen","_getLastGen","epoch","_getLastEpoch","_subscribeResponse","_subscribeError","UNSUBSCRIBE","min","_this14","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","ctx","latency","_this15","_isSubscribing","message","_setSubscribeError","_this16","recovered","_setSubscribeSuccess","pubs","publications","reverse","_handlePublication","recoverable","_recoverable","reply","errorExists","join","info","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","_handleReply","_handlePush","messages","slice","_this17","PING","_pingResponse","lastSeq","lastGen","lastEpoch","_this18","isFunction","_nextMessageId","_isConnected","_ping","_flush","_this19","authChannels","batch","_ret2","events","currentSub","_setEvents","_isUnsubscribed","11","_STATE_NEW","Subscription","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","_promiseId","on","errContext","_resolve","_reject","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","subPromise","_isError","res","rej","_nextPromiseId","_methodCall","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","EventEmitter","_maxListeners","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","handler","len","args","listeners","Array","apply","addListener","listener","newListener","warned","console","trace","once","removeListener","fired","list","position","splice","removeAllListeners","listenerCount","evlistener","emitter","7","prefix","lastIndexOf","level","logger","step","pow","floor"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\nvar _errorConnectionClosed = 'connection closed';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._websocket = null;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._lastSeq = {};\n    _this._lastGen = {};\n    _this._lastEpoch = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingTimeout = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._xhrID = 0;\n    _this._xhrs = {};\n    _this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      if (this._config.websocket !== null) {\n        return true;\n      }\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      Object.assign(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_abortInflightXHRs',\n    value: function _abortInflightXHRs() {\n      for (var xhrID in this._xhrs) {\n        try {\n          this._xhrs[xhrID].abort();\n        } catch (e) {\n          this._debug('error aborting xhr', e);\n        }\n        delete this._xhrs[xhrID];\n      }\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n      this._stopPing();\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback({ error: this._createErrorObject('disconnected') });\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._recover = true;\n            }\n            if (sub._shouldResubscribe()) {\n              sub._setSubscribing();\n            }\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      this._abortInflightXHRs();\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_isTransportOpen',\n    value: function _isTransportOpen() {\n      if (this._isSockjs) {\n        return this._transport && this._transport.transport && this._transport.transport.readyState === this._transport.transport.OPEN;\n      }\n      return this._transport && this._transport.readyState === this._transport.OPEN;\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return true;\n      }\n\n      if (!this._isTransportOpen()) {\n        // resolve pending commands with error if transport is not open\n        for (var command in commands) {\n          var id = command.id;\n          if (!(id in this._callbacks)) {\n            continue;\n          }\n          var callbacks = this._callbacks[id];\n          clearTimeout(this._callbacks[id].timeout);\n          delete this._callbacks[id];\n          var errback = callbacks.errback;\n          errback({ error: this._createErrorObject(_errorConnectionClosed, 0) });\n        }\n        return false;\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n      return true;\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        if (this._config.websocket !== null) {\n          this._websocket = this._config.websocket;\n        } else {\n          this._websocket = WebSocket;\n        }\n        this._transport = new this._websocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (resolveCtx) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          var err = rejectCtx.error;\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = _errorConnectionClosed;\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._dataReceived(event.data);\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      var _this4 = this;\n\n      var msg = {\n        method: this._methodType.RPC,\n        params: {\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (resolveCtx) {\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, resolveCtx.result);\n      }, function (rejectCtx) {\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n        return rejectCtx.error;\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      var sent = this._transportSend([msg]); // can send async message to server without id set\n      if (!sent) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      };\n      return Promise.resolve({});\n    }\n  }, {\n    key: 'publish',\n    value: function publish(channel, data) {\n      var msg = {\n        method: this._methodType.PUBLISH,\n        params: {\n          channel: channel,\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (result) {\n        if (result.next) {\n          result.next();\n        }\n        return {};\n      });\n    }\n  }, {\n    key: '_dataReceived',\n    value: function _dataReceived(data) {\n      var _this5 = this;\n\n      var replies = this._decoder.decodeReplies(data);\n      // we have to guarantee order of events in replies processing - i.e. start processing\n      // next reply only when we finished processing of current one. Without syncing things in\n      // this way we could get wrong publication events order as reply promises resolve\n      // on next loop tick so for loop continues before we finished emitting all reply events.\n      var p = Promise.resolve();\n\n      var _loop = function _loop(i) {\n        if (replies.hasOwnProperty(i)) {\n          p = p.then(function () {\n            return _this5._dispatchReply(replies[i]);\n          });\n        }\n      };\n\n      for (var i in replies) {\n        _loop(i);\n      }\n      this._restartPing();\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        var id = _this6._addMessage(msg);\n        _this6._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      if (this._isDisconnected()) {\n        return;\n      }\n\n      this._debug('disconnected:', reason, shouldReconnect);\n\n      var reconnect = shouldReconnect || false;\n\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      if (!this._isDisconnected()) {\n        this._setStatus('disconnected');\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._reconnecting === false) {\n          this.emit('disconnect', {\n            reason: reason,\n            reconnect: reconnect\n          });\n        }\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this7 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this7._xhrs) {\n          delete _this7._xhrs[xhrID];\n        }\n        if (_this7._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this7._debug('error refreshing connection token', resp.error);\n          } else {\n            _this7._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this7._numRefreshFailed++;\n          if (_this7._refreshTimeout !== null) {\n            clearTimeout(_this7._refreshTimeout);\n            _this7._refreshTimeout = null;\n          }\n          if (_this7._config.refreshAttempts !== null && _this7._numRefreshFailed >= _this7._config.refreshAttempts) {\n            _this7._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this7._numRefreshFailed, 20));\n          var interval = _this7._config.refreshInterval + jitter;\n          _this7._refreshTimeout = setTimeout(function () {\n            return _this7._refresh();\n          }, interval);\n          return;\n        }\n        _this7._numRefreshFailed = 0;\n        _this7._token = resp.data.token;\n        if (!_this7._token) {\n          _this7._refreshFailed();\n          return;\n        }\n        if (_this7._isDisconnected() && _this7._reconnect) {\n          _this7._debug('token refreshed, connect from scratch');\n          _this7._connect();\n        } else {\n          _this7._debug('send refreshed token');\n          var msg = {\n            method: _this7._methodType.REFRESH,\n            params: {\n              token: _this7._token\n            }\n          };\n          _this7._call(msg).then(function (resolveCtx) {\n            _this7._refreshResponse(_this7._decoder.decodeCommandResult(_this7._methodType.REFRESH, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            _this7._refreshError(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        var xhr = this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this8 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this8._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this9 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this9._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n    }\n  }, {\n    key: '_newXHRID',\n    value: function _newXHRID() {\n      this._xhrID++;\n      return this._xhrID;\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this10 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this10._xhrs) {\n          delete _this10._xhrs[xhrID];\n        }\n        if (resp.error || resp.status !== 200 || _this10._clientID !== clientID) {\n          return;\n        }\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this10._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this10._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this10._call(msg).then(function (resolveCtx) {\n          _this10._subRefreshResponse(channel, _this10._decoder.decodeCommandResult(_this10._methodType.SUB_REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this10._subRefreshError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this11 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this11._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this12 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this12._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this13 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var seq = this._getLastSeq(channel);\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          var gen = this._getLastGen(channel);\n          if (gen) {\n            msg.params.gen = gen;\n          }\n          var epoch = this._getLastEpoch(channel);\n          if (epoch) {\n            msg.params.epoch = epoch;\n          }\n        }\n\n        this._call(msg).then(function (resolveCtx) {\n          _this13._subscribeResponse(channel, _this13._decoder.decodeCommandResult(_this13._methodType.SUBSCRIBE, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this13._subscribeError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: '_getTTLMilliseconds',\n    value: function _getTTLMilliseconds(ttl) {\n      // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n      return Math.min(ttl * 1000, 2147483647);\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result) {\n      var _this14 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n      this._refreshRequired = false;\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this14._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._startPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingTimeout !== null) {\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this15 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingTimeout = setTimeout(function () {\n        if (!_this15.isConnected()) {\n          _this15._stopPing();\n          return;\n        }\n        _this15.ping();\n        _this15._pongTimeout = setTimeout(function () {\n          _this15._disconnect('no ping', true);\n        }, _this15._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, result) {\n      var _this16 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n\n      if (pubs && pubs.length > 0) {\n        // handle missed pubs.\n        pubs = pubs.reverse();\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      } else {\n        if (result.recoverable) {\n          this._lastSeq[channel] = result.seq || 0;\n          this._lastGen[channel] = result.gen || 0;\n        }\n      }\n\n      this._lastEpoch[channel] = result.epoch || '';\n\n      if (result.recoverable) {\n        sub._recoverable = true;\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this16._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply, next) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        next();\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback({ result: result, next: next });\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          next();\n          return;\n        }\n        var error = reply.error;\n        errback({ error: error, next: next });\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('join', { 'info': join.info });\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('leave', { 'info': leave.info });\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (pub.seq !== undefined) {\n        this._lastSeq[channel] = pub.seq;\n      }\n      if (pub.gen !== undefined) {\n        this._lastGen[channel] = pub.gen;\n      }\n      sub.emit('publish', pub);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data, next) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      }\n      next();\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      var next;\n      var p = new Promise(function (resolve) {\n        next = resolve;\n      });\n\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        next();\n        return p;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply, next);\n      } else {\n        this._handlePush(reply.result, next);\n      }\n\n      return p;\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      var _this17 = this;\n\n      var msg = {\n        method: this._methodType.PING\n      };\n      this._call(msg).then(function (resolveCtx) {\n        _this17._pingResponse(_this17._decoder.decodeCommandResult(_this17._methodType.PING, resolveCtx.result));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, function (rejectCtx) {\n        _this17._debug('ping error', rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  }, {\n    key: '_pingResponse',\n    value: function _pingResponse(result) {\n      if (!this.isConnected()) {\n        return;\n      }\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_getLastSeq',\n    value: function _getLastSeq(channel) {\n      var lastSeq = this._lastSeq[channel];\n      if (lastSeq) {\n        return lastSeq;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastGen',\n    value: function _getLastGen(channel) {\n      var lastGen = this._lastGen[channel];\n      if (lastGen) {\n        return lastGen;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastEpoch',\n    value: function _getLastEpoch(channel) {\n      var lastEpoch = this._lastEpoch[channel];\n      if (lastEpoch) {\n        return lastEpoch;\n      }\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this18 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this18._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback({ error: _this18._createErrorObject(_errorTimeout) });\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message) {\n      var id = this._nextMessageId();\n      message.id = id;\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      return id;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this19 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this19._xhrs) {\n          delete _this19._xhrs[xhrID];\n        }\n        if (_this19._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          _this19._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel2 = channels[i];\n              _this19._subscribeError(_channel2, _this19._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this19._isBatching) {\n          _this19.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret2 = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this19._subscribeError(channel, _this19._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this19._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub = _this19._getSub(channel);\n                if (_sub === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var seq = _this19._getLastSeq(channel);\n                  if (seq) {\n                    msg.params.seq = seq;\n                  }\n                  var gen = _this19._getLastGen(channel);\n                  if (gen) {\n                    msg.params.gen = gen;\n                  }\n                  var epoch = _this19._getLastEpoch(channel);\n                  if (epoch) {\n                    msg.params.epoch = epoch;\n                  }\n                }\n                _this19._call(msg).then(function (resolveCtx) {\n                  _this19._subscribeResponse(channel, _this19._decoder.decodeCommandResult(_this19._methodType.SUBSCRIBE, resolveCtx.result));\n                  if (resolveCtx.next) {\n                    resolveCtx.next();\n                  }\n                }, function (rejectCtx) {\n                  _this19._subscribeError(channel, rejectCtx.error);\n                  if (rejectCtx.next) {\n                    rejectCtx.next();\n                  }\n                });\n              }\n            }();\n\n            if (_ret2 === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this19.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._recoverable = false;\n    _this._recover = false;\n    _this._setEvents(events);\n    _this._initializePromise();\n    _this._promises = {};\n    _this._promiseId = 0;\n    _this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_nextPromiseId',\n    value: function _nextPromiseId() {\n      return ++this._promiseId;\n    }\n  }, {\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      }).then(function () {}, function () {});\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._recoverable === true && this._recover === true;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._recover = false;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].resolve();\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n      this.emit('error', errContext);\n      this._reject(errContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].reject(err);\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._recover = false;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastSeq[this.channel];\n        delete this._centrifuge._lastGen[this.channel];\n        delete this._centrifuge._lastEpoch[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered) {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      var methodCallPromise = new Promise(function (resolve, reject) {\n        var subPromise = void 0;\n        if (_this3._isSuccess()) {\n          subPromise = Promise.resolve();\n        } else if (_this3._isError()) {\n          subPromise = Promise.reject(_this3._error);\n        } else {\n          subPromise = new Promise(function (res, rej) {\n            var timeout = setTimeout(function () {\n              rej({ 'code': 0, 'message': 'timeout' });\n            }, _this3._centrifuge._config.timeout);\n            _this3._promises[_this3._nextPromiseId()] = {\n              timeout: timeout,\n              resolve: res,\n              reject: rej\n            };\n          });\n        }\n        subPromise.then(function () {\n          return _this3._centrifuge._call(message).then(function (resolveCtx) {\n            resolve(_this3._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            reject(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n      return methodCallPromise;\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b2ddf26611a603e8e645","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    Object.assign(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({error: this._createErrorObject('disconnected')});\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({error: this._createErrorObject(_errorConnectionClosed, 0)});\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      this._transport = new this._websocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    const msg = {\n      method: this._methodType.RPC,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(resolveCtx => {\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n      return this._decoder.decodeCommandResult(this._methodType.RPC, resolveCtx.result);\n    }, rejectCtx => {\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n      return rejectCtx.error;\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(result => {\n      if (result.next) {\n        result.next();\n      }\n      return {};\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    this._restartPing();\n  }\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    if (this._isDisconnected()) {\n      return;\n    }\n\n    this._debug('disconnected:', reason, shouldReconnect);\n\n    const reconnect = shouldReconnect || false;\n\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    if (!this._isDisconnected()) {\n      this._setStatus('disconnected');\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        if (seq) {\n          msg.params.seq = seq;\n        }\n        const gen = this._getLastGen(channel);\n        if (gen) {\n          msg.params.gen = gen;\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _connectResponse(result) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n\n    if (pubs && pubs.length > 0) {\n      // handle missed pubs.\n      pubs = pubs.reverse();\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    } else {\n      if (result.recoverable) {\n        this._lastSeq[channel] = result.seq || 0;\n        this._lastGen[channel] = result.gen || 0;\n      }\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({error, next});\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('join', {'info': join.info});\n  };\n\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('leave', {'info': leave.info});\n  };\n\n  _handleUnsub(channel, unsub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    sub.emit('publish', pub);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    }\n    next();\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({error: this._createErrorObject(_errorTimeout)});\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              if (seq) {\n                msg.params.seq = seq;\n              }\n              const gen = this._getLastGen(channel);\n              if (gen) {\n                msg.params.gen = gen;\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered) {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    const methodCallPromise = new Promise((resolve, reject) => {\n      let subPromise;\n      if (this._isSuccess()) {\n        subPromise = Promise.resolve();\n      } else if (this._isError()) {\n        subPromise = Promise.reject(this._error);\n      } else {\n        subPromise = new Promise((res, rej) => {\n          const timeout = setTimeout(function () {\n            rej({'code': 0, 'message': 'timeout'});\n          }, this._centrifuge._config.timeout);\n          this._promises[this._nextPromiseId()] = {\n            timeout: timeout,\n            resolve: res,\n            reject: rej\n          };\n        });\n      }\n      subPromise.then(\n        () => {\n          return this._centrifuge._call(message).then(\n            resolveCtx => {\n              resolve(this._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            },\n            rejectCtx => {\n              reject(rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            }\n          );\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n    return methodCallPromise;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}